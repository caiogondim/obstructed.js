/**
 * obstructed - Checks if the main thread is busy, executing a callback whenever it happens.
 *
 * @version 1.0.3
 * @link https://github.com/caiogondim/obstructed.js#readme
 * @author Caio Gondim
 * @license MIT
 */
!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.obstructed=n():t.obstructed=n()}(this,function(){return function(t){function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){var r=e(1),o=function(t,n){n=n||{},n.threshold=n.threshold||10;var e=r(),o=100;return setInterval(function(){var i=r()-e;i-o>n.threshold&&t(Math.round(i-o)),e=r()},o)};t.exports=o},function(t,n,e){(function(n){(function(){var e,r,o;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:"undefined"!=typeof n&&null!==n&&n.hrtime?(t.exports=function(){return(e()-o)/1e6},r=n.hrtime,e=function(){var t;return t=r(),1e9*t[0]+t[1]},o=e()):Date.now?(t.exports=function(){return Date.now()-o},o=Date.now()):(t.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(n,e(2))},function(t,n){function e(t){if(f===setTimeout)return setTimeout(t,0);try{return f(t,0)}catch(n){try{return f.call(null,t,0)}catch(n){return f.call(this,t,0)}}}function r(t){if(a===clearTimeout)return clearTimeout(t);try{return a(t)}catch(n){try{return a.call(null,t)}catch(n){return a.call(this,t)}}}function o(){p&&l&&(p=!1,l.length?h=l.concat(h):d=-1,h.length&&i())}function i(){if(!p){var t=e(o);p=!0;for(var n=h.length;n;){for(l=h,h=[];++d<n;)l&&l[d].run();d=-1,n=h.length}l=null,p=!1,r(t)}}function u(t,n){this.fun=t,this.array=n}function c(){}var f,a,s=t.exports={};!function(){try{f=setTimeout}catch(t){f=function(){throw new Error("setTimeout is not defined")}}try{a=clearTimeout}catch(t){a=function(){throw new Error("clearTimeout is not defined")}}}();var l,h=[],p=!1,d=-1;s.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];h.push(new u(t,n)),1!==h.length||p||e(i)},u.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=c,s.addListener=c,s.once=c,s.off=c,s.removeListener=c,s.removeAllListeners=c,s.emit=c,s.binding=function(t){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(t){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}}])});